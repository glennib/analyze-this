#!/usr/bin/env node

/**
 * Git History Analysis Tool
 *
 * Analyzes changes between two git refs across three dimensions:
 * 1. Module coupling
 * 2. Test coverage
 * 3. Abstractions and concepts
 *
 * Usage: ./analyze-changes <git-ref-a> <git-ref-b>
 * Output: JSON with scores from -5 to +5 for each dimension
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const MODEL = process.env.MODEL || 'claude-sonnet-4-20250514';

const PROMPTS_DIR = path.join(__dirname, 'prompts');
const DIMENSIONS = [
  { name: 'coupling', file: 'coupling-analysis.md' },
  { name: 'test_coverage', file: 'test-coverage-analysis.md' },
  { name: 'abstraction', file: 'abstraction-analysis.md' }
];

/**
 * Extract git diff between two refs
 */
function getGitDiff(refA, refB) {
  try {
    const diff = execSync(`git diff ${refA}..${refB}`, {
      encoding: 'utf-8',
      maxBuffer: 10 * 1024 * 1024 // 10MB buffer
    });
    return diff;
  } catch (error) {
    console.error(`Error getting git diff: ${error.message}`);
    process.exit(1);
  }
}

/**
 * Get file statistics from diff
 */
function getDiffStats(refA, refB) {
  try {
    const stats = execSync(`git diff --stat ${refA}..${refB}`, {
      encoding: 'utf-8'
    });
    return stats;
  } catch (error) {
    console.error(`Error getting diff stats: ${error.message}`);
    process.exit(1);
  }
}

/**
 * Load analysis prompt from file
 */
function loadPrompt(promptFile) {
  const promptPath = path.join(PROMPTS_DIR, promptFile);
  try {
    return fs.readFileSync(promptPath, 'utf-8');
  } catch (error) {
    console.error(`Error loading prompt ${promptFile}: ${error.message}`);
    process.exit(1);
  }
}

/**
 * Call Claude API to analyze diff according to dimension prompt
 */
async function analyzeDimension(dimension, prompt, diff, stats) {
  if (!ANTHROPIC_API_KEY) {
    console.error('Error: ANTHROPIC_API_KEY environment variable not set');
    process.exit(1);
  }

  const analysisPrompt = `${prompt}

## Git Diff to Analyze

### Diff Statistics
\`\`\`
${stats}
\`\`\`

### Full Diff
\`\`\`diff
${diff.slice(0, 50000)} ${diff.length > 50000 ? '\n... (diff truncated)' : ''}
\`\`\`

Please analyze this git diff according to the instructions above and return ONLY a valid JSON object in the format specified, with no additional text or markdown formatting.`;

  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: MODEL,
        max_tokens: 4096,
        messages: [{
          role: 'user',
          content: analysisPrompt
        }]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API request failed: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const content = data.content[0].text;

    // Extract JSON from response (handle markdown code blocks if present)
    let jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
    if (!jsonMatch) {
      jsonMatch = content.match(/```\s*([\s\S]*?)\s*```/);
    }

    const jsonStr = jsonMatch ? jsonMatch[1] : content;
    const result = JSON.parse(jsonStr.trim());

    return result;
  } catch (error) {
    console.error(`Error analyzing ${dimension}: ${error.message}`);
    return {
      dimension,
      score: 0,
      reasoning: `Analysis failed: ${error.message}`,
      key_factors: [],
      confidence: 'low',
      error: true
    };
  }
}

/**
 * Main execution
 */
async function main() {
  // Parse arguments
  const args = process.argv.slice(2);

  if (args.length !== 2) {
    console.error('Usage: ./analyze-changes <git-ref-a> <git-ref-b>');
    console.error('Example: ./analyze-changes main feature-branch');
    process.exit(1);
  }

  const [refA, refB] = args;

  console.error(`Analyzing changes from ${refA} to ${refB}...`);

  // Get git diff
  console.error('Extracting git diff...');
  const diff = getGitDiff(refA, refB);
  const stats = getDiffStats(refA, refB);

  if (!diff.trim()) {
    console.error('No changes detected between the specified refs.');
    process.exit(1);
  }

  // Analyze each dimension
  const results = {
    metadata: {
      ref_a: refA,
      ref_b: refB,
      analyzed_at: new Date().toISOString(),
      model: MODEL
    },
    dimensions: {},
    summary: {
      total_score: 0,
      average_score: 0
    }
  };

  for (const { name, file } of DIMENSIONS) {
    console.error(`Analyzing ${name}...`);
    const prompt = loadPrompt(file);
    const analysis = await analyzeDimension(name, prompt, diff, stats);
    results.dimensions[name] = analysis;
  }

  // Calculate summary
  const scores = Object.values(results.dimensions)
    .filter(d => !d.error)
    .map(d => d.score);

  results.summary.total_score = scores.reduce((a, b) => a + b, 0);
  results.summary.average_score = scores.length > 0
    ? (results.summary.total_score / scores.length).toFixed(2)
    : 0;

  // Output JSON
  console.log(JSON.stringify(results, null, 2));
}

// Run main function
main().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
